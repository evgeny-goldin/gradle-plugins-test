import groovy.json.JsonSlurper

import java.util.regex.Pattern

apply plugin: 'idea'
apply plugin: 'crawler'
apply plugin: 'gitdump'


ext.codenarcSources      =  'codenarc duplicates'.tokenize().collect { "$projectDir/$it/src/main/groovy" }
ext.codenarcRuleSetFiles = [ "$projectDir/codenarc.groovy" ]
apply from: 'https://raw.github.com/evgeny-goldin/gradle-plugins/master/codenarc/CodeNarc.gradle'


defaultTasks 'clean', 'codenarc', 'duplicates', 'build', 'about'


group = 'com.github.goldin.plugins.gradle'


buildscript {

    final pluginsVersion = '0.2-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/'
    }

    dependencies {
        classpath "com.github.goldin.plugins.gradle:about:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:crawler:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:duplicates:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:gitdump:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:kotlin:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:teamcity:$pluginsVersion"
    }
}


idea.project {
    jdkName = '1.7'
    ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
}


idea.module {

    downloadSources = true
    downloadJavadoc = false

    iml.withXml {
        provider ->
        provider.node.component.content.first().with {
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/gradle' ])
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/out'    ])
        }
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Groovy', level: 'application' ])
    }
}


crawler {
    final ignoredLinksEndsWith = 'redirect=no /feed/ /blog/wp-comments-post.php'.tokenize()
    final ignoredLinksContains = 'truezip.dev.java.net delicious.com/evgenyg ... Talk: Special: printable= oldid= action= /blog/tag/ wp-app.php xmlrpc.php replytocom='.tokenize()

    baseUrl            = 'evgeny-goldin.com'
    checkExternalLinks = true
    displayLinks       = true
    minimumBytes       = 2 * 1024 * 1024
    minimumLinks       = 2690

    log                = file( 'log.txt' )
    linksMapFile       = file( 'links.txt' )
    newLinksMapFile    = file( 'newLinks.txt' )

    linkTransformers   = [{ String link -> link.replace( 'evgeny-goldin.org', 'evgeny-goldin.org:8148' ) }]
    ignoredLinks       = [{ String link -> ignoredLinksEndsWith.any { link.endsWith( it )}},
                          { String link -> ignoredLinksContains.any { link.contains( it )}}]
}


task jfrogCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {

    List<String> nonHtmlLinksData    = file( 'jfrog-non-html-links.txt' ).readLines().grep()
    List<String> ignoredLinksData    = file( 'jfrog-ignored-links.txt'  ).readLines().grep()
    Pattern      jsessionidPattern   = Pattern.compile( /;jsessionid=\w+/ )
    Pattern      hotReferrersPattern = Pattern.compile( '(?s)<div class="basicPanelTitle">\\s+Hot Referrers\\s+</div>.+?</table>\\s+</div>' )

    config {
        it.with {
            baseUrl            = 'wiki.jfrog.org'
            requestDelay       = 1000
            checksumsChunkSize = 10 * 1024
            checkExternalLinks = true

            log                = file( 'log-jfrog.txt' )
            linksMapFile       = file( 'links-jfrog.txt' )
            newLinksMapFile    = file( 'newLinks-jfrog.txt' )

            nonHtmlLinks       = [{ String link -> nonHtmlLinksData.any { link.contains( it ) }}]
            ignoredLinks       = [{ String link -> ignoredLinksData.any { link.contains( it ) }}]
            linkTransformers   = [{ String link -> link.replaceAll( jsessionidPattern, '' )}]
            pageTransformers   = [{ String pageUrl, String pageContent -> pageContent.replaceAll( hotReferrersPattern, '' )}]
            ignoredContent     = [{
                String pageUrl, String pageContent ->
                pageContent.with {
                    contains( 'You are viewing an old version of this page. View the ' ) &&
                    contains( 'Compare with Current' ) &&
                    contains( 'View Page History' )
                }
            }]
        }
    }
}


task gradleCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    final versionPattern = Pattern.compile( 'gradle.org/docs/(.+?)/' )

    config {
        it.with {
            baseUrl            = 'gradle.org'
            requestDelay       = 1000
            checksumsChunkSize = 10 * 1024
            checkExternalLinks = true

            log                = file( 'log-gradle.txt' )
            linksMapFile       = file( 'links-gradle.txt' )
            newLinksMapFile    = file( 'newLinks-gradle.txt' )

            ignoredLinks       = [{
                String link ->
                if ( ! link.startsWith( 'http://gradle.org/docs/' )){ return false }

                final docsVersion = link.find( versionPattern ){ it[ 1 ] }
                docsVersion.contains( '-milestone-' ) || docsVersion.startsWith( '0.' )
            }]
        }
    }
}


gitdump {
    urls = new JsonSlurper().parseText( 'https://api.github.com/users/evgeny-goldin/repos'.toURL().text ).
           collect { Map    m       -> "${ m.git_url }:master" }.
           findAll { String repoUrl -> ! [ 'gcommons-old', 'presentations', 'WideFinder' ].any{ repoUrl.contains( it )}}
    runAggressiveGitGc = true
    singleArchive      = true
    totalBackupMaxSize = 100 * 1024 * 1024
}


subprojects {

    apply plugin: 'idea'
    apply plugin: 'groovy'
    apply plugin: 'about'
    apply plugin: 'duplicates'
    apply plugin: 'kotlin'


    clean { delete( "$rootDir/out", "$rootDir/build" ) }


    repositories {
        mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/'
    }

    dependencies {
        groovy      'org.codehaus.groovy:groovy-all:2.0.5'
        compile     'com.github.goldin.rest:youtrack:0.1-SNAPSHOT'
        testCompile ( 'junit:junit:4.10' ){ exclude group: 'org.hamcrest' }
        testRuntime 'ch.qos.logback:logback-classic:1.0.7'
    }
}


project ( ':kotlin:java-depends-on-kotlin' ) {
    dependencies.compile files( compileKotlin.destinationDir )
    compileJava.dependsOn compileKotlin
}


project ( ':kotlin:kotlin-depends-on-java' ) {
    compileKotlin.  dependsOn compileJava
    compileTestJava.dependsOn compileKotlin
}


task wrapper( type: Wrapper ) { gradleVersion = '1.2' }
