apply plugin: 'idea'
apply plugin: 'gitdump'
apply plugin: 'monitor'

ext.codenarcSources      = [ "$projectDir/codenarc/src/main/groovy" ]
ext.codenarcRuleSetFiles = [ "$projectDir/codenarc.groovy" ]

apply from: 'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/CodeNarc.gradle'
apply from: 'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/wrapper.gradle'


defaultTasks 'clean', 'codenarc', 'build', 'checkAboutAndLicense'


group = 'com.github.goldin.plugins.gradle'


buildscript {

    ext.pluginsVersion = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : '0.3-SNAPSHOT'
    println "> Running plugins version [$pluginsVersion]"

    repositories {
        mavenLocal()
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/plugins-snapshots-local/' }
    }

    dependencies {
        classpath "com.github.goldin.plugins.gradle:about:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:gitdump:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:monitor:$pluginsVersion"

    }
}


monitor    { 
    resourcesFile = file( 'monitor-resources.txt' )
    plotBuilds    = 3
}
gitdump    {
    final excludedProjects = 'widefinder gcommons-old'.tokenize()
    githubUser             = 'evgeny-goldin'
    bitbucketUser          = 'evgenyg'
    githubUseSshUrl        = false
    bitbucketPassword      = new File( System.getProperty( 'user.home' ), 'bitBucket.txt' ).text.trim()
    collectProjects        = { String repoUrl -> excludedProjects.any { repoUrl.contains( it )} ? '' : "$repoUrl:<last>" }
    singleArchive          = true
    totalBackupMinSize     = 40 * 1024 * 1024
    totalBackupMaxSize     = 60 * 1024 * 1024
}


idea.project {
    jdkName = '1.7'
    ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
}


idea.module {

    downloadSources = false
    downloadJavadoc = false

    excludeDirs += file( 'out' )

    iml.withXml {
        provider ->
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Groovy', level: 'application' ])
    }
}


allprojects {

    Project p ->

    apply plugin: 'groovy'
    apply plugin: 'about'

    clean { delete( "$rootDir/out", "$rootDir/build" ) }

    repositories {
        mavenLocal()
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/plugins-snapshots-local/' }
    }

    configurations { testFiles { transitive = false  }}

    'about crawler duplicates gitdump monitor node teamcity'.tokenize().each {
        String pluginName ->
        dependencies {
            testFiles "com.github.goldin.plugins.gradle:$pluginName:$pluginsVersion",
                      "com.github.goldin.plugins.gradle:$pluginName:$pluginsVersion:sources",
                      "com.github.goldin.plugins.gradle:$pluginName:$pluginsVersion:javadoc"
        }
    }

    dependencies {
        compile     localGroovy()
        testCompile 'junit:junit:4.11'
        testRuntime 'ch.qos.logback:logback-classic:1.0.12'
    }

    jar {
        dependsOn 'about'
        from file( 'license.txt' )
    }

    about {
        includeEnv          = true
        includeSystem       = true
        includeProperties   = true
        includePaths        = true
        includeDependencies = [ 'compile', 'runtime' ]
        prefix              = '/'
    }

    task sourcesJar( type: Jar, dependsOn: classes ) {
        dependsOn 'about'
        classifier = 'sources'
        from sourceSets.main.allSource
        from file( 'license.txt' )
    }

    task groovydocJar( type: Jar, dependsOn: groovydoc ) {
        dependsOn 'about'
        classifier = 'javadoc'
        from groovydoc.destinationDir
        from file( 'license.txt' )
    }

    artifacts {
        archives sourcesJar
        archives groovydocJar
    }
}


task checkAboutAndLicense << {

    println "> Testing plugins version [$pluginsVersion] for correct 'about' and 'license' files"

    final unpackDir = new File(( String ) project.buildDir, 'aboutLicenseUnpack' )

    configurations.testFiles.files.each {
        File file ->

        delete ( unpackDir )
        mkdir  ( unpackDir )
        copy   { from zipTree( file ); into unpackDir }

        final aboutFileText   = new File( unpackDir, 'about.txt'   ).text
        final licenseFileText = new File( unpackDir, 'license.txt' ).text
        final currentYear     = Calendar.instance.get( Calendar.YEAR )

        [ 'Git Info', 'Build Info', 'Gradle Info' ].each { assert aboutFileText.contains( it )}
        assert licenseFileText.contains( "Copyright $currentYear Goldin Evgeny (http://evgeny-goldin.com/)" )

        println "[$file.canonicalPath] - about and license checked"
    }
}
