import groovy.json.JsonSlurper


apply plugin: 'idea'
apply plugin: 'gitdump'


ext.codenarcSources      =  'codenarc duplicates'.tokenize().collect { "$projectDir/$it/src/main/groovy" }
ext.codenarcRuleSetFiles = [ "$projectDir/codenarc.groovy" ]
apply from: 'https://raw.github.com/evgeny-goldin/gradle-plugins/master/codenarc/CodeNarc.gradle'


defaultTasks 'clean', 'codenarc', 'duplicates', 'build'


final kotlinVersion = '0.4.297'
group               = 'com.github.goldin.plugins.gradle'

println "> Running Gradle [${ project.gradle.gradleVersion }], Groovy [${ GroovySystem.version }], Java [${ System.getProperty( 'java.version' ) }]"


buildscript {

    final pluginsVersion = '0.2-SNAPSHOT'

    repositories {
        mavenLocal()
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    }

    dependencies {
        classpath "com.github.goldin.plugins.gradle:about:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:crawler:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:duplicates:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:gitdump:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:kotlin:$pluginsVersion",
                  "com.github.goldin.plugins.gradle:teamcity:$pluginsVersion"
    }
}


idea.project {
    jdkName = '1.7'
    ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
}


idea.module {

    downloadSources = true
    downloadJavadoc = false

    iml.withXml {
        provider ->
        provider.node.component.content.first().with {
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/gradle' ])
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/out'    ])
        }
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Groovy', level: 'application' ])
    }
}


gitdump {
    urls = new JsonSlurper().parseText( 'https://api.github.com/users/evgeny-goldin/repos'.toURL().text ).
           collect { Map    m       -> "${ m.git_url }:master" }.
           findAll { String repoUrl -> ! [ 'gcommons-old', 'presentations', 'WideFinder' ].any{ repoUrl.contains( it )}}
    runAggressiveGitGc = true
    singleArchive      = true
    totalBackupMaxSize = 50 * 1024 * 1024
}


subprojects {

    Project p ->

    apply plugin: 'idea'
    apply plugin: 'about'
    apply plugin: 'duplicates'
    apply plugin: 'kotlin'

    clean { delete( "$rootDir/out", "$rootDir/build" ) }

    repositories { maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }}
    dependencies {
        testCompile 'junit:junit:4.11'
        testRuntime 'ch.qos.logback:logback-classic:1.0.9'
    }

    jar.dependsOn 'about'

    about {
        includeEnv          = true
        includeSystem       = true
        includeProperties   = true
        includePaths        = true
        includeDependencies = [ 'compile', 'runtime' ]
    }

    task sourcesJar( type: Jar, dependsOn: classes ) {
        dependsOn 'about'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts { archives sourcesJar }
}

project ( ':codenarc' ) {
    apply plugin: 'groovy'
    dependencies { groovy 'org.codehaus.groovy:groovy-all:2.0.5' }
}

project ( ':duplicates' ) {
    apply plugin: 'groovy'
    dependencies { groovy 'org.codehaus.groovy:groovy-all:2.0.5' }
}

project ( ':kotlin:java-depends-on-kotlin' ) {
    dependencies.compile files( compileKotlin.destinationDir )
    compileJava.dependsOn compileKotlin
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"
    }
}


project ( ':kotlin:kotlin-depends-on-java' ) {
    compileKotlin.  dependsOn compileJava
    compileTestJava.dependsOn compileKotlin
    dependencies {
        testRuntime "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"
    }
}


project ( ':kotlin:kotlin-standalone' ) {
    compileJava.    dependsOn compileKotlin
    compileTestJava.dependsOn compileTestKotlin
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-jdk-annotations:$kotlinVersion",
                files( "${ System.getProperty( 'java.home' )}/lib/jce.jar" )
    }
}


task wrapper( type: Wrapper ) { gradleVersion = '1.3' }
