apply plugin: 'idea'
apply plugin: 'monitor'
apply plugin: 'gitdump'

ext.codenarcSources      =  'codenarc duplicates'.tokenize().collect { "$projectDir/$it/src/main/groovy" }
ext.codenarcRuleSetFiles = [ "$projectDir/codenarc.groovy" ]

apply from: 'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/CodeNarc.gradle'
apply from: 'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/wrapper.gradle'


defaultTasks 'clean', 'codenarc', 'duplicates', 'build'


final pluginsVersion = '0.2.2-SNAPSHOT' // Also update in buildscript { .. } below!
final mavenRepoUrl   = 'http://evgenyg.artifactoryonline.com/evgenyg/repo/'
final kotlinVersion  = '0.5.162'
group                = 'com.github.goldin.plugins.gradle'


buildscript {

    final version = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : '0.2.2-SNAPSHOT'
    println "> Running plugins version [$version]"

    repositories {
        mavenLocal()
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://dl.bintray.com/content/evgenyg/BuildTools' }
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    }

    dependencies {
        classpath "com.github.goldin.plugins.gradle:about:$version",
                  "com.github.goldin.plugins.gradle:crawler:$version",
                  "com.github.goldin.plugins.gradle:duplicates:$version",
                  "com.github.goldin.plugins.gradle:gitdump:$version",
                  "com.github.goldin.plugins.gradle:kotlin:$version",
                  "com.github.goldin.plugins.gradle:monitor:$version",
                  "com.github.goldin.plugins.gradle:node:$version",
                  "com.github.goldin.plugins.gradle:teamcity:$version"
    }
}


gitdump {
    final excludedProjects = 'widefinder gcommons-old'.tokenize()
    githubUser             = 'evgeny-goldin'
    bitbucketUser          = 'evgenyg'
    githubUseSshUrl        = false
    bitbucketPassword      = new File( System.getProperty( 'user.home' ), 'bitBucket.txt' ).text.trim()
    collectProjects        = { String repoUrl -> excludedProjects.any { repoUrl.contains( it )} ? '' : "$repoUrl:<last>" }
    singleArchive          = true
    totalBackupMinSize     = 40 * 1024 * 1024
    totalBackupMaxSize     = 60 * 1024 * 1024
}


idea.project {
    jdkName = '1.7'
    ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
}


idea.module {

    downloadSources = true
    downloadJavadoc = false

    excludeDirs += file( 'out' )

    iml.withXml {
        provider ->
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Groovy', level: 'application' ])
    }
}


monitor { resourcesFile = file( 'monitor-resources.txt' )}


subprojects {

    Project p ->

    apply plugin: 'idea'
    apply plugin: 'about'
    apply plugin: 'duplicates'
    apply plugin: 'kotlin'

    clean { delete( "$rootDir/out", "$rootDir/build" ) }

    repositories { maven { url mavenRepoUrl }}
    dependencies {
        testCompile 'junit:junit:4.11'
        testRuntime 'ch.qos.logback:logback-classic:1.0.9'
    }

    jar.dependsOn 'about', ':checkAboutAndLicense'

    about {
        includeEnv          = true
        includeSystem       = true
        includeProperties   = true
        includePaths        = true
        includeDependencies = [ 'compile', 'runtime' ]
    }

    task sourcesJar( type: Jar, dependsOn: classes ) {
        dependsOn 'about'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts { archives sourcesJar }
}

project ( ':codenarc' ) {
    apply plugin: 'groovy'
    dependencies { groovy 'org.codehaus.groovy:groovy-all:2.0.6' }
}

project ( ':duplicates' ) {
    apply plugin: 'groovy'
    dependencies { groovy 'org.codehaus.groovy:groovy-all:2.0.6' }
}

project ( ':kotlin:java-depends-on-kotlin' ) {
    dependencies.compile files( compileKotlin.destinationDir )
    compileJava.dependsOn compileKotlin
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"
    }
}


project ( ':kotlin:kotlin-depends-on-java' ) {
    compileKotlin.  dependsOn compileJava
    compileTestJava.dependsOn compileKotlin
    dependencies {
        testRuntime "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"
    }
}


project ( ':kotlin:kotlin-standalone' ) {
    compileJava.    dependsOn compileKotlin
    compileTestJava.dependsOn compileTestKotlin

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-jdk-annotations:$kotlinVersion",
                files( "${ System.getProperty( 'java.home' )}/lib/jce.jar" )
    }

    // 'kotlin' extension is an instance of K2JVMCompilerArguments (http://goo.gl/NyLkC)
    kotlin {
        notNullAssertions      = true
        notNullParamAssertions = true
        outputDir              = project.buildDir.canonicalPath + '/' + new Random().nextInt( 100 )
        // This fails the build
        // classpath           = ''
    }

    compileKotlin << {
        // Can be also seen if Gradle is run with "-i" flag
        println "Compilation classpath: [${ kotlin.classpath }]"
        assert new File(( String ) kotlin.outputDir ).with{ directory && list() }
    }
}


task checkAboutAndLicense << {

    final version = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : pluginsVersion
    println "> Testing plugins version [$version] for correct 'about' and 'license' files"

    configurations { aboutDependencies { transitive = false }}
    repositories   { mavenLocal(); maven { url mavenRepoUrl }}
    dependencies   {
        aboutDependencies "com.github.goldin.plugins.gradle:about:$version",
                          "com.github.goldin.plugins.gradle:crawler:$version",
                          "com.github.goldin.plugins.gradle:duplicates:$version",
                          "com.github.goldin.plugins.gradle:gitdump:$version",
                          "com.github.goldin.plugins.gradle:kotlin:$version",
                          "com.github.goldin.plugins.gradle:monitor:$version",
                          "com.github.goldin.plugins.gradle:node:$version",
                          "com.github.goldin.plugins.gradle:teamcity:$version"
    }

    final unpackDir = new File(( String ) project.buildDir, 'aboutLicenseUnpack' )
    final config    = ( Configuration ) configurations.aboutDependencies

    config.dependencies.each {
        Dependency dependency ->

        File file = config.fileCollection( dependency ).singleFile

        delete ( unpackDir )
        mkdir  ( unpackDir )
        copy   { from zipTree( file ); into unpackDir }

        final aboutFileText         = new File( unpackDir, 'about.txt'   ).text
        final licenseFileText       = new File( unpackDir, 'license.txt' ).text
        final dependencyCoordinates = "${ dependency.group }:${ dependency.name }:${ dependency.version }"
        final currentYear           = Calendar.instance.get( Calendar.YEAR )

        [ 'Git Info', 'Build Info', 'Gradle Info', dependencyCoordinates ].each { assert aboutFileText.contains( it )}
        assert licenseFileText.contains( "Copyright $currentYear Goldin Evgeny (http://evgeny-goldin.com/)" )

        println "[$dependencyCoordinates][$file] - about and license checked"
    }
}
