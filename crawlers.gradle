import java.util.regex.Pattern

apply plugin: 'crawler'
defaultTasks  'crawler'


buildscript {

    final pluginsVersion = '0.2-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/'
    }

    dependencies { classpath "com.github.goldin.plugins.gradle:crawler:$pluginsVersion" }
}


crawler {
    final ignoredLinksEndsWith = 'redirect=no /feed/ /blog/wp-comments-post.php'.tokenize()
    final ignoredLinksContains = 'truezip.dev.java.net delicious.com/evgenyg ... Talk: Special: printable= oldid= action= /blog/tag/ wp-app.php xmlrpc.php replytocom='.tokenize()

    baseUrl            = 'evgeny-goldin.com'
    checkExternalLinks = true
    displayLinks       = true
    teamcityMessages   = true

    log                = file( 'log.txt' )
    linksMapFile       = file( 'links.txt' )
    newLinksMapFile    = file( 'newLinks.txt' )

    minimumLinks       = 2500
    minimumBytes       = 2 * 1024 * 1024
    linkTransformers   = [{ String link -> link.replace( 'evgeny-goldin.org', 'evgeny-goldin.org:8148' ) }]
    ignoredLinks       = [{ String link -> ignoredLinksEndsWith.any { link.endsWith( it )}},
                          { String link -> ignoredLinksContains.any { link.contains( it )}}]
}


task jfrogCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {

    List<String> nonHtmlLinksData    = file( 'jfrog-non-html-links.txt' ).readLines().grep()
    List<String> ignoredLinksData    = file( 'jfrog-ignored-links.txt'  ).readLines().grep()
    Pattern      jsessionidPattern   = Pattern.compile( /;jsessionid=\w+/ )
    Pattern      hotReferrersPattern = Pattern.compile( '(?s)<div class="basicPanelTitle">\\s+Hot Referrers\\s+</div>.+?</table>\\s+</div>' )

    config {
        it.with {
            baseUrl            = 'wiki.jfrog.org'
            teamcityMessages   = true
            checkExternalLinks = true

            log                = file( 'log-jfrog.txt' )
            linksMapFile       = file( 'links-jfrog.txt' )
            newLinksMapFile    = file( 'newLinks-jfrog.txt' )

            minimumLinks       = 16800
            minimumBytes       = 57 * 1024 * 1024
            nonHtmlLinks       = [{ String link -> nonHtmlLinksData.any { link.contains( it ) }}]
            ignoredLinks       = [{ String link -> ignoredLinksData.any { link.contains( it ) }}]
            linkTransformers   = [{ String link -> link.replaceAll( jsessionidPattern, '' )}]
            pageTransformers   = [{ String pageUrl, String pageContent -> pageContent.replaceAll( hotReferrersPattern, '' )}]
            ignoredContent     = [{
                String pageUrl, String pageContent ->
                pageContent.with {
                    contains( 'You are viewing an old version of this page. View the ' ) &&
                    contains( 'Compare with Current' ) &&
                    contains( 'View Page History' )
                }
            }]
        }
    }
}


task gradleCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    final versionPattern = Pattern.compile( 'gradle.org/docs/(.+?)/' )

    config {
        it.with {
            baseUrl            = 'gradle.org'
            teamcityMessages   = true
            checkExternalLinks = true

            log                = file( 'log-gradle.txt' )
            linksMapFile       = file( 'links-gradle.txt' )
            newLinksMapFile    = file( 'newLinks-gradle.txt' )

            minimumLinks       = 17300
            minimumBytes       = 30 * 1024 * 1024
            ignoredLinks       = [{
                String link ->
                if ( ! link.startsWith( 'http://gradle.org/docs/' )){ return false }

                final docsVersion = link.find( versionPattern ){ it[ 1 ] }
                docsVersion.contains( '-milestone-' ) || docsVersion.startsWith( '0.' )
            }]
        }
    }
}


task hascoreCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    config {
        it.with {
            baseUrl            = 'hascore.com'
            teamcityMessages   = true
            checkExternalLinks = true

            log                = file( 'log-hascore.txt' )
            linksMapFile       = file( 'links-hascore.txt' )
            newLinksMapFile    = file( 'newLinks-hascore.txt' )

            minimumLinks       = 2700
            minimumBytes       = 1 * 1024 * 1024
            ignoredLinks       = [{ String link -> link.endsWith( '/&' ) }]
        }
    }
}


task berlindevopsCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    config {
        it.with {
            baseUrl            = 'berlindevops.org'
            teamcityMessages   = true
            checkExternalLinks = true

            log                = file( 'log-berlindevops.txt' )
            linksMapFile       = file( 'links-berlindevops.txt' )
            newLinksMapFile    = file( 'newLinks-berlindevops.txt' )

            minimumLinks       = 400
            minimumBytes       = 1 * 1024 * 1024
            ignoredLinks       = [{ String link -> link.with{ endsWith( '/wp-comments-post.php' ) ||
                                                              endsWith( '/?pushpress=hub' ) }}]
            ignoredBrokenLinks = [{ String link -> link == 'http://berlindevops.org?like=1' }]
        }
    }
}


task teamcityWikiCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    Pattern      jsessionidPattern = Pattern.compile( /;jsessionid=\w+/ )
    List<String> ignoredLinksData  = file( 'teamcity-ignored-links.txt'  ).readLines().grep()

    config {
        it.with {
            baseUrl            = 'confluence.jetbrains.net/display/TCD7'
            teamcityMessages   = true
            checkExternalLinks = true

            log                = file( 'log-teamcity.txt' )
            linksMapFile       = file( 'links-teamcity.txt' )
            newLinksMapFile    = file( 'newLinks-teamcity.txt' )

            minimumLinks       = 2900
            minimumBytes       = 3 * 1024 * 1024
            linkTransformers   = [{ String link -> link.replaceAll( jsessionidPattern, '' )}]
            ignoredLinks       = [{ String link -> ignoredLinksData.any { link.contains( it ) }}]
        }
    }
}
