import java.util.regex.Pattern

apply plugin: 'crawler'
apply from:   'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/wrapper.gradle'
defaultTasks  'crawler'


buildscript {

    final version = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : '0.3.1-SNAPSHOT'
    println "> Running Crawler plugin version [$version]"

    repositories {
        mavenLocal()
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://dl.bintray.com/content/evgenyg/BuildTools' }
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    }

    dependencies { classpath "com.github.goldin.plugins.gradle:crawler:$version" }
}


crawler {
    final ignoredLinksEndsWith = 'redirect=no /wiki/... /wiki/MyPage /feed/ /blog/wp-comments-post.php'.tokenize()
    final ignoredLinksContains = '/export/exportCsvQuery/xml? truezip.dev.java.net delicious.com/evgenyg ... Talk: Special: printable= oldid= action= /blog/tag/ wp-app.php xmlrpc.php replytocom='.tokenize()

    baseUrl            = 'evgeny-goldin.com'
    checkExternalLinks = true
    teamcityMessages   = true
    displayLinks       = true
    displayLinksPath   = true

    log                = file( 'log.txt' )
    linksMapFile       = file( 'links.txt' )
    newLinksMapFile    = file( 'newLinks.txt' )

    minimumLinks       = 2500
    minimumBytes       = 2 * 1024 * 1024
    linkTransformers   = [{ String link -> link.replace( 'evgeny-goldin.org', 'evgeny-goldin.org:8148' ) }]
    ignoredLinks       = [{ String link -> ignoredLinksEndsWith.any { link.endsWith( it )}},
                          { String link -> ignoredLinksContains.any { link.contains( it )}}]
}


task groovydocCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {

    final ignoredLinksList       = '/org/gradle/api/internal/ /org/gradle/api/tasks/bundling/Jar.html'.tokenize()
    final ignoredBrokenLinksList = 'constant-values-todo.html overview-tree-todo.html'.tokenize()

    config { it.with {

            baseUrl            = 'evgeny-goldin.org:8148/groovydoc/gradle-plugins/'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinksPath   = true

            log                = file( 'log-groovydoc.txt' )
            linksMapFile       = file( 'links-groovydoc.txt' )
            newLinksMapFile    = file( 'newLinks-groovydoc.txt' )

            minimumLinks       = 190
            minimumBytes       = 1024 * 1024

            linkTransformers   = [{ String link -> link.replaceFirst( /evgeny-goldin.org(:\d+)?/, 'evgeny-goldin.org:8148' ) }]
            ignoredLinks       = [{ String link -> ignoredLinksList.any { link.contains( it ) }}]
            ignoredBrokenLinks = [{ String link -> ignoredBrokenLinksList.any { link.contains( it ) }}]
    }}
}


task wikiCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {

    final ignoredLinksEndsWith = 'redirect=no /wiki/... /wiki/MyPage'.tokenize()
    final ignoredLinksContains = 'ftp.newartisans.com/pub/git.from.bottom.up.pdf blogs.atlassian.com/2011/12/git-submodules/ /export/exportCsvQuery/xml? Talk: Special: printable= oldid= action='.tokenize()

    config { it.with {

            baseUrl            = 'evgeny-goldin.com/wiki'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinksPath   = true

            log                = file( 'log-wiki.txt' )
            linksMapFile       = file( 'links-wiki.txt' )
            newLinksMapFile    = file( 'newLinks-wiki.txt' )

            minimumLinks       = 1100
            minimumBytes       = 510 * 1024

            linkTransformers   = [{ String link -> link.replaceFirst( /evgeny-goldin.org(:\d+)?/, 'evgeny-goldin.org:8148' ) }]
            ignoredLinks       = [{ String link -> ignoredLinksEndsWith.any { link.endsWith( it )}},
                                  { String link -> ignoredLinksContains.any { link.contains( it )}}]
    }}
}


task jfrogComCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {

    config { it.with {

            baseUrl            = 'www.jfrog.com'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinks       = true
            displayLinksPath   = true

            log                = file( 'log-jfrog-site.txt' )
            linksMapFile       = file( 'links-jfrog-site.txt' )
            newLinksMapFile    = file( 'newLinks-jfrog-site.txt' )

            minimumLinks       = 210
            minimumBytes       = 400 * 1024
            ignoredLinks       = [{ String link -> link == 'http://localhost:8080/artifactory/' }]
    }}
}


task jfrogWikiCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {

    List<String> nonHtmlLinksData    = file( 'jfrog-non-html-links.txt' ).readLines()*.trim().grep()
    List<String> ignoredLinksData    = file( 'jfrog-ignored-links.txt'  ).readLines()*.trim().grep()
    Pattern      jsessionidPattern   = Pattern.compile( /;jsessionid=\w+/ )
    Pattern      hotReferrersPattern = Pattern.compile( '(?s)<div class="basicPanelTitle">\\s+Hot Referrers\\s+</div>.+?</table>\\s+</div>' )

    config { it.with {

            baseUrl            = 'wiki.jfrog.org'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinksPath   = true
            pageDownloadLimit  = 300 * 1024
            totalDownloadLimit = -1

            log                = file( 'log-jfrog-wiki.txt' )
            linksMapFile       = file( 'links-jfrog-wiki.txt' )
            newLinksMapFile    = file( 'newLinks-jfrog-wiki.txt' )

            minimumLinks       = 13000
            minimumBytes       = 40 * 1024 * 1024
            nonHtmlLinks       = [{ String link -> nonHtmlLinksData.any { link.contains( it ) }}]
            ignoredLinks       = [{ String link -> ignoredLinksData.any { link.contains( it ) }}]
            linkTransformers   = [{ String link -> link.replaceAll( jsessionidPattern, '' )}]
            pageTransformers   = [{ String pageUrl, String pageContent -> pageContent.replaceAll( hotReferrersPattern, '' )}]
            ignoredContent     = [{
                String pageUrl, String pageContent ->
                pageContent.with {
                    contains( 'You are viewing an old version of this page. View the ' ) &&
                    contains( 'Compare with Current' ) &&
                    contains( 'View Page History' )
                }
            }]
    }}
}


task gradleOrgCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    final versionPattern = Pattern.compile( 'gradle.org/docs/([^/]+)' )
    final fullScan       = System.getProperty( 'gradleFull' ) != null

    config { it.with {

            baseUrl            = 'www.gradle.org'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinks       = true
            displayLinksPath   = true
            pageDownloadLimit  = 500 * 1024
            minimumLinks       = fullScan ? 58500             : 21600
            minimumBytes       = fullScan ? 110 * 1024 * 1024 : 40 * 1024 * 1024
            totalDownloadLimit = fullScan ? 140 * 1024 * 1024 : 60 * 1024 * 1024

            log                = file( 'log-gradle.txt' )
            linksMapFile       = file( 'links-gradle.txt' )
            newLinksMapFile    = file( 'newLinks-gradle.txt' )

            ignoredLinks       = ( fullScan ? [] : [{
                String link ->
                if ( ! link.startsWith( 'http://www.gradle.org/docs/' )){ return false }

                final docsVersion = link.find( versionPattern ){ it[ 1 ] }

                ( docsVersion != null ) &&
                ( docsVersion.contains( '-milestone-' ) || docsVersion.startsWith( '0.' ))
            }])
    }}
}


task marsjobsCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    config { it.with {

            baseUrl            = 'marsjobs.net'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinksPath   = true

            log                = file( 'log-marsjobs.txt' )
            linksMapFile       = file( 'links-marsjobs.txt' )
            newLinksMapFile    = file( 'newLinks-marsjobs.txt' )

            minimumLinks       = 2700
            minimumBytes       = 1 * 1024 * 1024
            ignoredLinks       = [{ String link -> link.endsWith( '/&' ) }]
    }}
}


task berlindevopsCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    config { it.with {

            baseUrl            = 'berlindevops.org'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinksPath   = true

            log                = file( 'log-berlindevops.txt' )
            linksMapFile       = file( 'links-berlindevops.txt' )
            newLinksMapFile    = file( 'newLinks-berlindevops.txt' )

            minimumLinks       = 350
            minimumBytes       = 800 * 1024
            ignoredLinks       = [{ String link -> link.with{ endsWith( '/wp-comments-post.php' ) ||
                                                              endsWith( '/?pushpress=hub' ) }}]
            ignoredBrokenLinks = [{ String link -> link == 'http://berlindevops.org?like=1' }]
    }}
}



task teamcityWikiCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    Pattern      jsessionidPattern = Pattern.compile( /;jsessionid=\w+/ )
    List<String> ignoredLinksData  = file( 'teamcity-ignored-links.txt'  ).readLines()*.trim().grep()

    config { it.with {

            baseUrl            = 'confluence.jetbrains.com/display/TCD7/'
            teamcityMessages   = true
            checkExternalLinks = true
            displayLinksPath   = true

            log                = file( 'log-teamcity-wiki.txt' )
            linksMapFile       = file( 'links-teamcity-wiki.txt' )
            newLinksMapFile    = file( 'newLinks-teamcity-wiki.txt' )

            minimumLinks       = 2780
            minimumBytes       = 3 * 1024 * 1024
            linkTransformers   = [{ String link -> link.replaceAll( jsessionidPattern, '' )}]
            ignoredLinks       = [{ String link -> ignoredLinksData.any { link.contains( it ) }}]
    }}
}


task teamcityJavadocsCrawler( type: com.github.goldin.plugins.gradle.crawler.CrawlerTask ) {
    config { it.with {

        baseUrl            = 'javadoc.jetbrains.net/teamcity/openapi/current/'
        teamcityMessages   = true
        checkExternalLinks = true
        displayLinksPath   = true
        pageDownloadLimit  = 4 * 1024 * 1024

        log                = file( 'log-teamcity-javadoc.txt' )
        linksMapFile       = file( 'links-teamcity-javadoc.txt' )
        newLinksMapFile    = file( 'newLinks-teamcity-javadoc.txt' )

        minimumLinks       = 3300
        minimumBytes       = 5 * 1024 * 1024
    }}
}
