
apply from: 'https://raw.github.com/evgeny-goldin/scripts/master/src/main/gradle/wrapper.gradle'

buildscript {

    final version = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : '0.2.1-SNAPSHOT'
    println "> Running Node.js plugin version [$version]"

    repositories { mavenLocal(); maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }}
    dependencies { classpath "com.github.goldin.plugins.gradle:node:$version" }
}

defaultTasks 'clean', 'cleanModules', 'start', 'restartall', 'stop', 'stopall'


int portNumberForProject( Project p ){ 3000 + ( Math.abs( p.name.hashCode()) % 100 ) }


subprojects {
    Project p ->

    apply plugin: 'node'

    clean.doFirst {
        if ( System.getProperty( 'cleanNode' ) != null )
        {
            final deleteFiles = [ new File( System.getProperty( 'user.home' ), '.npm' ),
                                  new File( System.getProperty( 'user.home' ), '.nvm' ) ]

            println "Deleting $deleteFiles"
            project.delete( deleteFiles )
        }
    }

    node {
        checkContent    = p.name + (( p.name == 'hello-js'                 ) ? '|yhn|890|' :
                                    ( p.name == 'hello-js-port-number'     ) ? '|undefined|undefined|' :
                                    ( p.name == 'hello-coffee-port-number' ) ? '|zaq|123|' : '' )
        pidOnlyToStop   = false
        scriptArguments = "--port $portNumber"
        portNumber      = portNumberForProject( p )
        configs         = [[ 'config/development.json' : file( "${ project.name }.json" ) ],
                           [ 'config/development.json' : [ port : portNumber ]]]
    }
}

project ( ':hello-js'                 ) { node { configsNewKeys = 'fail'   }}
project ( ':hello-js-port-number'     ) { node { configsNewKeys = 'ignore' }}
project ( ':hello-coffee-port-number' ) { node { configsNewKeys = 'create' }}

project ( ':hello-js-configs' ) {
    Project p ->

    node {
        configsNewKeys = 'create'
        portNumber     = portNumberForProject( p )
        configs        = [[ 'config/development-1.json' : file( "${ project.name }-1.json" ) ],
                          [ 'config/development-1.json' : file( "${ project.name }-2.json" ) ],
                          [ 'config/development-1.json' : [ port : portNumber ]],
                          [ 'config/development-2.json' : file( "${ project.name }.properties" ) ]]
    }

    setup << {
        assert file( 'config/development-1.json' ).text == file( 'config/development-1-result.json' ).text
        assert file( 'config/development-2.json' ).text == file( 'config/development-2-result.json' ).text
        println "Configs generated are checked"
    }
}
